{"version":3,"sources":["components/Phonebook.js","services/persons.js","App.js","index.js"],"names":["Notification","_ref","notification","message","type","react_default","a","createElement","className","Header","_ref2","header","Person","_ref3","person","deletePerson","name","number","onClick","id","Persons","_ref4","persons","map","Phonebook_Person","key","PersonForm","_ref5","personForm","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","FilterForm","_ref6","filterForm","filter","handleFilterChange","Phonebook","_ref7","Phonebook_Header","Phonebook_Notification","Phonebook_FilterForm","Phonebook_PersonForm","Phonebook_Persons","baseUrl","services_persons","axios","get","then","response","data","newObject","post","put","concat","delete","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setFilter","_useState9","_useState10","setNotification","useEffect","personService","intialPersons","personsToShow","toLowerCase","includes","notify","setTimeout","event","preventDefault","window","confirm","oldPerson","find","changedPerson","objectSpread","returnedPerson","catch","error","status","p","target","components_Phonebook","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.58ae2cf1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// Ilmoituskomponentti, pystyy ilmoittamaan onnistuneet\r\n// toimenpiteet ja virheet\r\nconst Notification = ({ notification}) => {\r\n  if (notification.message === null) {\r\n    return null\r\n  }\r\n  if (notification.type === \"success\"){\r\n    return (\r\n      <div className=\"success\">\r\n        {notification.message}\r\n      </div>\r\n    )\r\n  }\r\n  else if (notification.type === \"error\"){\r\n    return (\r\n      <div className=\"error\">\r\n        {notification.message}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// Otsikkokomponentti\r\nconst Header = ({header}) => (\r\n  <h2>{header}</h2>\r\n)\r\n\r\n// Henkilöiden esittäminen taulukkomuodossa\r\nconst Person = ({person, deletePerson}) => (\r\n  <tr>\r\n    <td>{person.name}</td>\r\n    <td>{person.number}</td>\r\n    <td><button onClick={() => deletePerson(person.id)}> Delete contact </button></td>\r\n    </tr>\r\n)\r\n\r\n// Luo taulukon osoitekirjaa varten\r\nconst Persons = ({persons, deletePerson}) => (\r\n  <table>\r\n    <tbody>\r\n      {persons.map(person =>\r\n          <Person\r\n            key={person.name}\r\n            person={person}\r\n            deletePerson={deletePerson}\r\n          />\r\n      )}\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\n// Lomake henkilöiden lisäämistä varten\r\nconst PersonForm = ({personForm}) => (\r\n  <form onSubmit={personForm.addPerson}>\r\n    <div>\r\n      name: <input\r\n              value={personForm.newName}\r\n              onChange={personForm.handleNameChange}\r\n            />\r\n    </div>\r\n    <div>\r\n      number: <input\r\n              value={personForm.newNumber}\r\n              onChange={personForm.handleNumberChange}\r\n            />\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>\r\n)\r\n\r\n// Lomake suodattimelle\r\nconst FilterForm = ({filterForm}) => (\r\n  <div>\r\n    name: <input\r\n            value={filterForm.filter}\r\n            onChange={filterForm.handleFilterChange}\r\n          />\r\n  </div>\r\n)\r\n\r\n// Osoitekirjan luova komponentti.\r\nconst Phonebook = ({personForm, filterForm, persons, notification}) => {\r\n  return (\r\n    <div>\r\n      <Header header='Phonebook' />\r\n      <Notification notification={notification} />\r\n      <FilterForm filterForm={filterForm} />\r\n      <Header header='Add a new number' />\r\n      <PersonForm personForm={personForm} />\r\n      <Header header='Number' />\r\n      <Persons persons={persons} deletePerson={personForm.deletePerson}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Phonebook\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deletePerson}\r\n","import React, { useState, useEffect } from 'react'\r\nimport Phonebook from './components/Phonebook'\r\nimport personService from './services/persons'\r\n\r\nconst App = () => {\r\n  // Henkilökokoelma\r\n  const [ persons, setPersons] = useState([])\r\n  // Uuden henkilön tiedot\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  // Suodattimen tiedot\r\n  const [ filter, setFilter] = useState('')\r\n  // ilmoituksen tiedot\r\n  const [notification, setNotification] = useState({message: null, type:null})\r\n\r\n  // haetaan tiedot paikalliselta JSON-palvelimelta\r\n  useEffect(() => {\r\n    personService\r\n      .getAll()\r\n      .then(intialPersons => {\r\n        setPersons(intialPersons)\r\n      })\r\n  }, [])\r\n\r\n  // Jos suodatin ei ole tyhjä, muuta nimet ja suodatin\r\n  // pieniksi kirjaimikse ja suodata näytetävät numerot\r\n  const personsToShow = !filter\r\n      ? persons\r\n      : persons.filter(person =>\r\n          person.name.toLowerCase().includes(\r\n            filter.toLowerCase())\r\n          )\r\n\r\n  // Funktio, joka luo ilmoituksen sekä sen palautuksen\r\n  // 5s kuluttua\r\n  const notify = (message, type) => {\r\n    setNotification({\r\n      message: message,\r\n      type: type\r\n    })\r\n    setTimeout(() => {\r\n      setNotification({\r\n        message: null,\r\n        type: null\r\n      })\r\n    }, 5000)\r\n  }\r\n\r\n  // Nimikentän muutosfunktio\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  // Numerokentän muutosfunktio\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  // Suodatinkentän muutosfunktio\r\n  const handleFilterChange = (event) => {\r\n    setFilter(event.target.value)\r\n  }\r\n\r\n  // Henkilön poistofunktio\r\n  const deletePerson = id => {\r\n    // etsitään oikea objekti\r\n    const person = persons.find(person => person.id === id)\r\n    // varmistetaan, että henkilö halutaan poistaa\r\n    if (window.confirm(`Are you sure you want to delete ${person.name}?`)) {\r\n      personService\r\n      .deletePerson(id)\r\n      .then(() => {\r\n        // ilmoitetaan onnistuneesta poistosta\r\n        notify(\r\n          `'${person.name}' has been deleted`,\r\n          'success'\r\n        )\r\n        setPersons(persons.filter(p => p.id !== id))\r\n      })\r\n      .catch(error => {\r\n        // Jos henkilö on jo poistettu, tehdää siitä ilmoitus\r\n         notify(\r\n           `'${person.name}' was already deleted from server`,\r\n           'error'\r\n         )\r\n         setPersons(persons.filter(p => p.id !== id))\r\n       })\r\n\r\n     }\r\n  }\r\n\r\n  // Henkilön lisääminen osoitekirjaan\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n\r\n    // Jos henkilön nimi on jo kirjassa, kysy jos halutaan päivitää se\r\n    if (persons.map(person => person.name).includes(newName)) {\r\n      if (window.confirm(`${newName} is already added to phonebook. Would you like update the number?`)) {\r\n        // Alkuperäinen objekti\r\n        const oldPerson = persons.find(person => person.name === newName)\r\n        // Päivitetty objekti\r\n        const changedPerson = {...oldPerson, number: newNumber}\r\n\r\n        // Päivitetään tietokanta\r\n        personService\r\n          .update(changedPerson.id, changedPerson)\r\n          .then(returnedPerson => {\r\n            // ilmoitetaan onnistuneesta päivityksestä\r\n            notify(\r\n              `'${oldPerson.name}' has been updated`,\r\n              'success'\r\n            )\r\n            setPersons(persons.map(person => person.id !== changedPerson.id ? person : returnedPerson))\r\n          })\r\n          .catch(error => {\r\n            // Jos puhelinnumero ei ole päässyt validoinnista, otetaan virheviesti\r\n            // ja näytetään käyttäjälle\r\n            if (error.response.data.error === \"Phone number is too short\"\r\n                ||error.response.data.error === \"Phone number is required\") {\r\n                  notify(error.response.data.error, 'error')\r\n            } else if (error.response.status === 404){\r\n              // Jos henkilöä ei löydy luettelosta, ilmoitetaan siitä erikseen\r\n              notify(`'${oldPerson.name}' has been removed from the phonebook`, 'error')\r\n              setPersons(persons.filter(p => p.id !== oldPerson.id))\r\n            }\r\n          })\r\n      }\r\n    } else {\r\n      // Jos henkilöä ei vielä ole lisätty, tehdään se\r\n      const personObject = {\r\n        name: newName,\r\n        number: newNumber\r\n      }\r\n      personService\r\n        .create(personObject)\r\n        .then(returnedPerson => {\r\n          // ilmoitetaan onnistuneesta lisäyksestä\r\n          notify(\r\n            `'${returnedPerson.name}' has been added`,\r\n            'success'\r\n          )\r\n          setPersons(persons.concat(returnedPerson))\r\n          setNewName('')\r\n          setNewNumber('')\r\n        })\r\n        // Näytetään virheviesti kun lisäys on epäonnistunut\r\n        .catch(error => {\r\n          notify(error.response.data.error, 'error')\r\n         })\r\n    }\r\n  }\r\n\r\n  // Kerää yhteen kokoelmaobjektiin kaikki lisäämislomakkeen\r\n  // tarvittavat objektit\r\n  const personForm = {\r\n      addPerson,\r\n      newName,\r\n      handleNameChange,\r\n      newNumber,\r\n      handleNumberChange,\r\n      deletePerson\r\n    }\r\n\r\n  // Same suodatinkentälle\r\n  const filterForm = {\r\n    filter,\r\n    handleFilterChange\r\n  }\r\n\r\n  return (\r\n    <Phonebook\r\n      personForm={personForm}\r\n      filterForm={filterForm}\r\n      persons={personsToShow}\r\n      notification={notification}\r\n    />\r\n  )\r\n\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}