{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","content","onClick","Notification","message","className","services_notes","axios","get","then","response","data","newObject","post","id","put","concat","Footer","style","color","fontStyle","fontSize","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","value","onChange","target","type","App_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ed7d7765.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }\r\n","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport noteService from './services/notes'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n  }, [])\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n      ? notes\r\n      : notes.filter(note => note.important)\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n\r\n    noteService\r\n     .update(id, changedNote)\r\n     .then(returnedNote => {\r\n       setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n     })\r\n     .catch(error => {\r\n       setErrorMessage(\r\n         `Note '${note.content}' was already removed from server`\r\n       )\r\n       setTimeout(() => {\r\n         setErrorMessage(null)\r\n       }, 5000)\r\n        setNotes(notes.filter(n => n.id !== id))\r\n      })\r\n  }\r\n\r\n  const rows = () => notesToShow.map(note =>\r\n    <Note\r\n      key={note.id}\r\n      note={note}\r\n      toggleImportance={() => toggleImportanceOf(note.id)}\r\n    />\r\n  )\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n    }\r\n\r\n    noteService\r\n     .create(noteObject)\r\n     .then(returnedNote => {\r\n       setNotes(notes.concat(returnedNote))\r\n       setNewNote('')\r\n     })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n\r\n      <Notification message={errorMessage} />\r\n\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all' }\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {rows()}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote}\r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}